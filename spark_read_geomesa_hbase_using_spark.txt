import org.locationtech.geomesa.spark
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.execution.datasources

val dsParams = Map(
"hbase.zookeepers" -> "192.168.1.41",
"hbase.catalog" -> "<nameOfCatalog/schema>")
// Create SparkSession
val sparkSession = SparkSession.builder().appName("testSpark").config("spark.sql.crossJoin.enabled", "true").enableHiveSupport().master("spark://192.168.1.41:7077").getOrCreate()

// Create DataFrame using the "geomesa" format
val dataFrame = sparkSession.read.format("geomesa").options(dsParams).option("geomesa.feature", "<nameOfFeature/table>").load()
dataFrame.createOrReplaceTempView("<nameOfFeature/table>")
val sql = " desc <nameOfFeature/table>"
val result = sparkSession.sql(sql)
//result.show(50, false)

val sql = "select * from <nameOfFeature/table> limit 100000"
val result = sparkSession.sql(sql)
result.show

BTW: how can I register geomesa-user mail list? The official website reports I need to send mail to geomesa-users-join@locationtech.org manually, but I still get the right to send mail to mail
 list after sending request to geomesa-users-join@locationtech.org .
val jsonPath = "/root/geomesa-hbase_2.12-4.0.0/bin/data.json"
val rdd = sparkSession.read.option("multiline",true).json(jsonPath)

rdd.show


----------------------------------------------------------------
This works with our case:
import org.geotools.data._
import scala.collection.JavaConverters._
import org.geotools.factory.CommonFactoryFinder
import org.locationtech.geomesa.spark.jts._


val params = Map(
"hbase.zookeepers" -> "192.168.1.41",
"hbase.catalog" -> "<nameOfCatalog/schema>").asJava


spark.withJTS
import spark.implicits._


val tableRDD = spark.read
  .format("geomesa")
  .options(params)
  .option("geomesa.feature", "<nameOfFeature/table>")
  .load()
  
  
tableRDD.show
tableRDD.show(false)
tableRDD.filter(tableRDD("row1) === "value1").show(false)
tableRDD.select("row1").show(false)






